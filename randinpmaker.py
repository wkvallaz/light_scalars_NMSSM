from time import time
import numpy as np
import csv 
import sys

configname="F2Ds1win1"

#read_dir_name = "/home/wolf/NMSSMTools_6.0.0/calculations/"
save_dir_name = "/home/wolf/NMSSMTools_6.0.0/calculations/"
#save_dir_name = "/mnt/c/Users/Wolfgang/FORESEE-main/FORESEE-main/Models/NMSSM/model/"



S1BOUNDS = [ (10**i,10**(i+.20)) for i in np.linspace(-1,.8,11)]
#print(len(S1BOUNDS))
#print(S1BOUNDS)
#sys.exit()
P1MMIN=0
P1MMAX=0
S1MMIN=0
S1MMAX=0
for i,(S1MMIN,S1MMAX) in enumerate(S1BOUNDS):
	for j,CON in enumerate(["THY","LEP","LHC","BKF"]):
		f = open(f"{save_dir_name}{configname}_{i}{CON}randinp.dat", "w")
	
		f.write(f"# Input file for NMSSMTools\n")
		f.write(f"# Based on SUSY LES HOUCHES ACCORD II\n")
		f.write(f"#\n")
		f.write(f"BLOCK MODSEL\n")
		f.write(f"	3	1		# NMSSM particle content\n")
		f.write(f"	1	0		# IMOD (0=general NMSSM, 1=SUGRA, 2=GMSB\n")
		f.write(f"#				  3=Z3 inv NMSSM, 4=Z3 inv SUGRA, 5=Z3 inv GMSB)\n")
		f.write(f"	10	2		# ISCAN (0=no scan, 1=grid scan, 2=random scan, 3=MCMC)\n")
		f.write(f"	9	0		# |OMGFLAG|=0: no (default), =1: relic density only,\n")
		f.write(f"#				  =2: dir. det. rate, =3: indir. det. rate, =4: both,\n")
		f.write(f"#				  OMGFLAG>0: 0.107<OMG<0.131, <0: OMG<0.131\n")
		f.write(f"	15	0		# Precision for micromegas (default=0):\n")
		f.write(f"#				  +0/1: fast computation on/off\n")
		f.write(f"#				  +0/2: Beps=1d-3, 1d-6\n")
		f.write(f"#				  +0/4: virtual Ws off/on\n")
		f.write(f"	8       0               # Precision for Higgs masses (default 0:\n")
		f.write(f"#				  0: full 1 loop top/bot + LL 2 loop top/bot + LL 1 loop EW\n")
		f.write(f"#                                 1: full 1 loop + full 2 loop top/bot\n")
		f.write(f"#				  2: as 1 + pole masses - 1&2 by courtesy of P. Slavich)\n")
		f.write(f"#                                 +3: computation of Higgs mass uncertainty by varying the RG scale by *2 and /2\n")
		f.write(f"#                                 +6: check that uncertainty is < 3 GeV\n")
		f.write(f"	14      0               # 0: H-> VV,VV* (default); 1: H->VV,VV*,V*V*\n")
		f.write(f"	13      1               # 1: Sparticle decays via NMSDECAY (default 0)\n")
		f.write(f"	11      0               # (g-2)_muon (=-1 computed, 1=computed and contraints checked,\n")
		f.write(f"#                                 0=not computed, default=1)\n")
		f.write(f"	17      {int(j==0)}               # Theoretical constraints (1=yes, 0=no, default=1)\n")
		f.write(f"	18      {int(j==1)}               # LEP/Tevatron constraints(1=yes, 0=no, default=1)\n")
		f.write(f"	19      {int(j==2)}               # LHC Higgs constraints (1=yes, 0=no, default=1)\n")
		f.write(f"	20      {int(j==3)}               # Upsilon B and K decay constraints (1=yes, 0=no, default=1)\n")
		f.write(f"	22      0               # CMS charg(neutral)ino constraints (1=yes, 0=no, default=0)\n")
		f.write(f"        23      0               # Delta_MW (=-1 computed, 1=computed and contraints checked,\n")
		f.write(f"#                                 0=not computed, default=0)\n")
		f.write(f"	24      0               # LHC SUSY constraints via SmodelS (1=yes, 0=no, default=0)\n")
		f.write(f"#\n")
		f.write(f"BLOCK SMINPUTS\n")
		f.write(f"	1	127.92d0	# ALPHA_EM^-1(MZ)\n")
		f.write(f"	2	1.1663787d-5	# GF\n")
		f.write(f"	3	0.1181d0	# ALPHA_S(MZ)\n")
		f.write(f"	4	91.187d0	# MZ\n")
		f.write(f"	5	4.18d0		# MB(MB) (running mass)\n")
		f.write(f"	6	173.4d0		# MTOP (pole mass)\n")
		f.write(f"	7	1.777d0		# MTAU\n")
		f.write(f"#\n")
		f.write(f"BLOCK MINPAR\n")
		f.write(f"	37	2d0		# TANB_min at MZ\n")
		f.write(f"	38	50d0       	# TANB_max at MZ (If =/= min)\n")
		f.write(f"#\n")
		f.write(f"BLOCK EXTPAR\n")
		f.write(f"#	0	1000d0		# MSUSY (If =/= SQRT(2*MQ1+MU1+MD1)/2)\n")
		f.write(f"#	107	150d0		# M1_min (If =/= M2/2)\n")
		f.write(f"#	108	550d0		# M1_max (If =/= min)\n")
		f.write(f"	207	2484.01d0	# M2_min\n")
		f.write(f"#	208	3000d0		# M2_max (If =/= min)\n")
		f.write(f"#	307	3000d0		# M3_min (If =/= 3*M2)\n")
		f.write(f"#	308	10000d0		# M3_max (If =/= min)\n")
		f.write(f"	117	7500d0		# AU3_min\n")
		f.write(f"#	118	5000d0		# AU3_max (If =/= min)\n")
		f.write(f"	127	5000d0		# AD3_min\n")
		f.write(f"#	128	8000d0		# AD3_max (If =/= min)\n")
		f.write(f"	137	5000d0		# AE3_min\n")
		f.write(f"#	138	1500d0		# AE3_max (If =/= min)\n")
		f.write(f"#	167	0d0		# AE2_min = AE1 (If =/= AE3)\n")
		f.write(f"#	168	0d0		# AE2_max (If =/= min)\n")
		f.write(f"	337	5000d0		# ML3_min\n")
		f.write(f"#	338	200d0		# ML3_max (If =/= min)\n")
		f.write(f"#	327	0d0		# ML2_min = ML1 (If =/= ML3)\n")
		f.write(f"#	328	0d0		# ML2_max (If =/= min)\n")
		f.write(f"	367	5000d0		# ME3_min\n")
		f.write(f"#	368	200d0		# ME3_max (If =/= min)\n")
		f.write(f"#	357	0d0		# ME2_min = ME1 (If =/= ME3)\n")
		f.write(f"#	358	0d0		# ME2_max (If =/= min)\n")
		f.write(f"	437	5000d0		# MQ3_min\n")
		f.write(f"#	438	1000d0		# MQ3_max (If =/= min)\n")
		f.write(f"#	427	0d0		# MQ2_min = MQ1 (If =/= MQ3)\n")
		f.write(f"#	428	0d0		# MQ2_max (If =/= min)\n")
		f.write(f"	467	5000d0		# MU3_min\n")
		f.write(f"#	468	1000d0		# MU3_max (If =/= min)\n")
		f.write(f"#	457	0d0		# MU2_min = MU1 (If =/= MU3)\n")
		f.write(f"#	458	0d0		# MU2_max (If =/= min)\n")
		f.write(f"	497	5000d0		# MD3_min\n")
		f.write(f"#	498	1000d0		# MD3_max (If =/= min)\n")
		f.write(f"#	487	0d0		# MD2_min = MD1 (If =/= MD3)\n")
		f.write(f"#	488	0d0		# MD2_max (If =/= min)\n")
		f.write(f"	617	0.000001d0	# LAMBDA_min\n")
		f.write(f"	618	1.0d0		# LAMBDA_max (If =/= min)\n")
		f.write(f"	627	0.0d0		# KAPPA_min (If =/= 0)\n")
		f.write(f" 	628	0.003d0		# KAPPA_max (If =/= min)\n")
		f.write(f"	637	0d0		# ALAMBDA_min (If XIF+MA are not inputs)\n")
		f.write(f"	638	20000d0		# ALAMBDA_max (If =/= min and XIF+MA are not inputs)\n")
		f.write(f"	647	-5d0		# AKAPPA_min (If KAPPA =/=0 and XIS+MP are not inputs)\n")
		f.write(f"	648	0d0		# AKAPPA_max (If =/= min, KAPPA =/=0 and XIS+MP are not inputs)\n")
		f.write(f"#				  If KAPPA can be 0: AKAPPA = 0 (either XIS or MP is input)\n")
		f.write(f"	657	400d0		# MUEFF_min\n")
		f.write(f"	658	1500d0		# MUEFF_max (If =/= min)\n")
		f.write(f"#	667	0d0		# XIF_min in GeV^2 (If ALAMBDA+MA are not inputs)\n")
		f.write(f"#	668	0d0		# XIF_max in GeV^2 (If =/= min and ALAMBDA+MA are not inputs)\n")
		f.write(f"#	677	0d0	 	# XIS_min in GeV^3 (If AKAPPA+MP are not inputs)\n")
		f.write(f"#	678	0d0	 	# XIS_max in GeV^3 (If =/= min and AKAPPA+MP are not inputs)\n")
		f.write(f"#	687	0d0		# MUP_min (If =/= 0)\n")
		f.write(f"#	688	0d0		# MUP_max (If =/= min)\n")
		f.write(f"#	697	0d0		# MSP_min in GeV^2 (If =/= 0)\n")
		f.write(f"#	698	0d0		# MSP_max in GeV^2 (If =/= min)\n")
		f.write(f"#	727	0d0		# M3H_min in GeV^2 (If =/= 0)\n")
		f.write(f"#	728	0d0		# M3H_max in GeV^2 (If =/= min)\n")
		f.write(f"#	1247	0.259434E+04	# MA_min (If ALAMBDA+XIF are not inputs)\n")
		f.write(f"#	1248	0d0		# MA_max (If =/= min and ALAMBDA+XIF are not inputs)\n")
		f.write(f"#				  If ALAMBDA+MA+XIF are not inputs: ALAMBDA=XIF=0, MA is computed\n")
		f.write(f"#				  If only XIF is input: ALAMBDA=0, MA is computed\n")
		f.write(f"#				  If only MA is input: XIF=0, ALAMBDA is computed\n")
		f.write(f"#				  If only ALAMBDA is input: XIF=0, MA is computed\n")
		f.write(f"#	1257	0.863261E+02	# MP_min (If AKAPPA+XIS is not an input)\n")
		f.write(f"#	1258	0d0		# MP_max (If =/= min and AKAPPA+XIS is not an input)\n")
		f.write(f"#				  If AKAPPA+MP+XIS are not inputs: AKAPPA=XIS=0, MP is computed\n")
		f.write(f"#				  If only XIS is input: AKAPPA=0, MP is computed\n")
		f.write(f"#				  If only MP is input: XIS=0, AKAPPA is computed\n")
		f.write(f"#				  If only AKAPPA is input: XIS=0, MP is computed\n")
		f.write(f"	1001	{P1MMIN}d0		# P1MMIN, or the minimum value of PMASS(1) allowed in generation (ignored if 0)\n")
		f.write(f"	1002	{P1MMAX}d0		# P1MMAX, or the maximum value of PMASS(1) allowed in generation (ignored if 0)\n")

		f.write(f"	1011	{S1MMIN}d0		# S1MMIN, or the minimum value of SMASS(1) allowed in generation (ignored if 0)\n")
		f.write(f"	1012	{S1MMAX}d0		# S1MMAX, or the maximum value of SMASS(1) allowed in generation (ignored if 0)\n")
		f.write(f"#\n")
		f.write(f"BLOCK STEPS\n")
		f.write(f"	0	2000		# NTOT\n")
		f.write(f"	1	1		# ISEED\n")
		
		f.close()
